generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  following     Follow[]     @relation("Following")
  followers     Follow[]     @relation("Followers")

  chatsA        Chat[]       @relation("UserA")
  chatsB        Chat[]       @relation("UserB")
  messages      Message[]

  videos        Video[]
  likes         Like[]
  comments      Comment[]
  savedVideos   SavedVideo[]
}

model Follow {
  id           String   @id @default(uuid())
  follower     User     @relation("Following", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("Followers", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}

model Chat {
  id        String   @id @default(uuid())
  userA     User     @relation("UserA", fields: [userAId], references: [id])
  userAId   String
  userB     User     @relation("UserB", fields: [userBId], references: [id])
  userBId   String
  messages  Message[]
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Message {
  id        String   @id @default(uuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  sentAt    DateTime @default(now())
}

model Video {
  id          String       @id @default(uuid())
  url         String
  description String?
  postedBy    User         @relation(fields: [postedById], references: [id])
  postedById  String
  createdAt   DateTime     @default(now())

  likes       Like[]
  comments    Comment[]
  savedBy     SavedVideo[]
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())

  @@unique([userId, videoId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model SavedVideo {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  savedAt   DateTime @default(now())

  @@unique([userId, videoId])
}

